#!/usr/bin/env python

import sys
import subprocess
import argparse

import boto
from boto import ec2
from boto import utils

import hashlib

import pystache
from pystache import Renderer

parser = argparse.ArgumentParser(description='Build partial Varnish config with backends from EC2 API')
parser.add_argument('--tagname',  default='machinetype', help='Tag for backend instances')
parser.add_argument('--tagvalue', default='web', help='Tag for backend instances')
parser.add_argument('--name', default='cluster', help='Name for  backend group')
parser.add_argument('--ownazweight', default='99999', help='Weight for hosts in same AZ')
parser.add_argument('--dummy', default=False, action='store_true', help='Whether to add a dummy host if no backends found')
parser.add_argument('--dummyhostname', default='dummy', help='Hostname of dummy host if no backends found')
parser.add_argument('--notify', help='Service to reload when regenerated')
parser.add_argument('template', help='Template to use')
parser.add_argument('output', help='File to write output to')
args = parser.parse_args()

data = {
         'backend_name': args.name,
         'backends': [ ]
       }

def get_region(region):
    for r in ec2.regions():
        if r.name == region:
            return r

# Returns VPC ID of the local host
def get_vpc():
    mac = utils.get_instance_metadata()['network']['interfaces']['macs'].keys()[0]
    return utils.get_instance_metadata()['network']['interfaces']['macs'][mac]['vpc-id']

def md5_file(filename):
    try:
        f = open(filename, "r")
    except:
        # It's OK for the file to not exist yet
        return ""
    md5sum =  hashlib.md5(f.read()).digest()
    f.close()
    return md5sum

ec2conn = boto.connect_ec2(
        region=get_region(utils.get_instance_metadata()['placement']['availability-zone'][:-1]))
vpc = get_vpc()
for res in ec2conn.get_all_instances():
    for i in res.instances:
        try:
            if i.tags[args.tagname] == args.tagvalue and i.state == 'running' and i.vpc_id == vpc:
                details = {
                        'name': i.id.replace('-','_'), # Varnish doesn't allow dashes in names
                        'host': i.private_ip_address,
                        }
                if i.placement == utils.get_instance_metadata()['placement']['availability-zone']:
                    details['weight'] = args.ownazweight
                else:
                    details['weight'] = 1
                data['backends'].append(details)
        except:
            pass

if args.dummy and not data['backends']:
    # Add some dummy data - Varnish won't load without a backend
    data['backends'] = [{ 'name': args.dummyhostname, 'host': '255.255.255.254', 'weight': 1 }]

renderer = Renderer()
rendered = renderer.render_path(args.template, data)

if md5_file(args.output) != hashlib.md5(rendered).digest():
    # File has changed on disk
    f = open(args.output, "w")
    f.write(rendered)
    f.close()
    if args.notify:
        subprocess.call("/sbin/service %s reload" % args.notify,shell=True,stderr=subprocess.STDOUT)
